env: {
  es2020: true,
  node: true
}

extends: ["eslint:recommended"]

rules: {
  array-bracket-spacing: "error",
  curly: ["error", "multi-or-nest", "consistent"],
  eol-last: "error",
  eqeqeq: ["error", "smart"],
  func-call-spacing: "error",
  function-call-argument-newline: ["error", "consistent"],
  function-paren-newline: "error",
  indent: ["error", 2, {
    CallExpression: {arguments: 1},
    SwitchCase: 1
  }],
  keyword-spacing: ["error", {
    before: false,
    after: true,
    overrides: {
      this: {after: false, before: true},
      of: {before: true},
      instanceof: {before: true},
      extends: {before: true},
      in: {before: true},
      from: {before: true},
      as: {before: true},
      break: {after: false},
      catch: {after: false},
      continue: {after: false},
      debugger: {after: false},
      do: {after: false},
      else: {after: false},
      finally: {after: false},
      for: {after: false},
      if: {after: false},
      super: {after: false},
      switch: {after: false},
      while: {after: false}
    }
  }],
  max-len: ["error", 120],
  new-parens: "error",
  no-constant-condition: ["error", {checkLoops: false}],
  no-empty: ["error", {allowEmptyCatch: true}],
  no-extra-parens: ["error", "all", {nestedBinaryExpressions: false}],
  no-mixed-operators: "error",
  no-multiple-empty-lines: ["error", {max: 1}],
  no-new-wrappers: "error",
  no-process-exit: "off",
  no-prototype-builtins: "off",
  no-shadow: ["error", {builtinGlobals: true}],
  no-trailing-spaces: "error",
  no-var: "error",
  object-curly-newline: ["error", {
    ObjectExpression: {multiline: true, minProperties: 4},
    ObjectPattern: "never",
    ImportDeclaration: "never",
    ExportDeclaration: {multiline: true, minProperties: 4}
  }],
  object-curly-spacing: "error",
  object-property-newline: ["error", {allowAllPropertiesOnSameLine: true}],
  one-var: ["error", "never"],
  padding-line-between-statements: [
    "error",
    {blankLine: "never", next: "*", prev: "*"},
    {blankLine: "always", next: "return", prev: "*"},
    {blankLine: "always", next: "break", prev: "*"},
    {blankLine: "always", next: "continue", prev: "*"},
    {blankLine: "always", next: "throw", prev: "*"},
    {blankLine: "always", next: "class", prev: "*"},
    {blankLine: "always", next: "*", prev: "import"},
    {blankLine: "always", next: "import", prev: "*"},
    {blankLine: "never", next: "import", prev: "import"},
    {blankLine: "always", next: "export", prev: "*"},
    {blankLine: "always", next: "*", prev: "export"},
    {blankLine: "never", next: "export", prev: "export"},
    {blankLine: "always", next: "*", prev: "class"},
    {blankLine: "always", next: "function", prev: "*"},
    {blankLine: "always", next: "*", prev: "function"},
    {blankLine: "always", next: "if", prev: "*"},
    {blankLine: "always", next: "*", prev: "if"},
    {blankLine: "always", next: "for", prev: "*"},
    {blankLine: "always", next: "*", prev: "for"},
    {blankLine: "always", next: "while", prev: "*"},
    {blankLine: "always", next: "*", prev: "while"},
    {blankLine: "always", next: "try", prev: "*"},
    {blankLine: "always", next: "*", prev: "try"},
    {blankLine: "always", next: "switch", prev: "*"},
    {blankLine: "always", next: "*", prev: "switch"},
    {blankLine: "always", next: "do", prev: "*"},
    {blankLine: "always", next: "*", prev: "do"},
    {blankLine: "always", next: "block-like", prev: "const"},
    {blankLine: "always", next: "const", prev: "block-like"},
    {blankLine: "always", next: "expression", prev: "const"},
    {blankLine: "always", next: "const", prev: "expression"},
    {blankLine: "always", next: "block-like", prev: "let"},
    {blankLine: "always", next: "let", prev: "block-like"},
    {blankLine: "always", next: "expression", prev: "let"},
    {blankLine: "always", next: "let", prev: "expression"}
  ],
  prefer-const: ["error", {destructuring: "all"}],
  prefer-template: "error",
  quotes: ["error", "double"],
  # Dishonor! Dishonor on you, dishonor on ya cow!
  require-atomic-updates: "off",
  semi: "error",
  space-before-function-paren: ["error", {
    anonymous: "never",
    named: "never",
    asyncArrow: "always"
  }],
  space-in-parens: "error",
  strict: ["error", "global"]
}

overrides: [{
  files: ["**/*.mjs"],
  parserOptions: {sourceType: "module"}
}]

parserOptions: {
  ecmaVersion: 2021,
  sourceType: "script"
}
